version: "3.8"

services:
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - rede_interna
    deploy:
      restart_policy:
        condition: on-failure

  backend:
    image: emaildoissa/betanalyzer-backend:latest
    depends_on:
      - db
    environment:
      DB_HOST: db
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}
      JWT_SECRET: ${JWT_SECRET}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
    networks:
      - rede_interna
    deploy:
      restart_policy:
        condition: on-failure

  frontend:
    image: emaildoissa/betanalyzer-frontend:latest
    depends_on:
      - backend
    networks:
      - rede_interna
    deploy:
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.routers.betanalyzer.rule=Host(`betanalyzer.automacao.free.nf`)
        - traefik.http.routers.betanalyzer.entrypoints=websecure
        - traefik.http.routers.betanalyzer.tls.certresolver=letsencryptresolver
        - traefik.http.services.betanalyzer.loadbalancer.server.port=80

volumes:
  postgres_data:
    external: true

networks:
  rede_interna: ## Nome da rede interna
    external: true
    name: rede_interna ## Nome da rede interna

